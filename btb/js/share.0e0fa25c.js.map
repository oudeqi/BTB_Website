{"version":3,"sources":["webpack:///./node_modules/_accounting@0.4.1@accounting/accounting.js","webpack:///./app/pages/config.js","webpack:///./app/pages/share/share.js"],"names":["root","undefined","lib","version","settings","currency","symbol","format","decimal","thousand","precision","grouping","number","nativeMap","Array","prototype","map","nativeIsArray","isArray","toString","Object","isString","obj","charCodeAt","substr","call","isObject","defaults","object","defs","key","hasOwnProperty","iterator","context","i","j","results","length","checkPrecision","val","base","Math","round","abs","isNaN","checkCurrencyFormat","match","pos","neg","replace","zero","unformat","parse","value","regex","RegExp","unformatted","parseFloat","toFixed","power","pow","formatNumber","opts","usePrecision","negative","parseInt","mod","split","formatMoney","formats","formatColumn","list","padAfterSymbol","indexOf","maxLength","fVal","join","module","exports","accounting","BASE_URL","__webpack_require__","_accounting","_config","console","log","reg","r","id","window","location","search","decodeURIComponent","pageData","$","html","get","done","result","JSON","code","data","commodity","video","picture","name","_accounting2","default","price","booking","description","fail","error"],"mappings":"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","file":"js/share.0e0fa25c.js","sourcesContent":["/*!\n * accounting.js v0.4.1\n * Copyright 2014 Open Exchange Rates\n *\n * Freely distributable under the MIT license.\n * Portions of accounting.js are inspired or borrowed from underscore.js\n *\n * Full details and documentation:\n * http://openexchangerates.github.io/accounting.js/\n */\n\n(function(root, undefined) {\n\n\t/* --- Setup --- */\n\n\t// Create the local library object, to be exported or referenced globally later\n\tvar lib = {};\n\n\t// Current version\n\tlib.version = '0.4.1';\n\n\n\t/* --- Exposed settings --- */\n\n\t// The library's settings configuration object. Contains default parameters for\n\t// currency and number formatting\n\tlib.settings = {\n\t\tcurrency: {\n\t\t\tsymbol : \"$\",\t\t// default currency symbol is '$'\n\t\t\tformat : \"%s%v\",\t// controls output: %s = symbol, %v = value (can be object, see docs)\n\t\t\tdecimal : \".\",\t\t// decimal point separator\n\t\t\tthousand : \",\",\t\t// thousands separator\n\t\t\tprecision : 2,\t\t// decimal places\n\t\t\tgrouping : 3\t\t// digit grouping (not implemented yet)\n\t\t},\n\t\tnumber: {\n\t\t\tprecision : 0,\t\t// default precision on numbers is 0\n\t\t\tgrouping : 3,\t\t// digit grouping (not implemented yet)\n\t\t\tthousand : \",\",\n\t\t\tdecimal : \".\"\n\t\t}\n\t};\n\n\n\t/* --- Internal Helper Methods --- */\n\n\t// Store reference to possibly-available ECMAScript 5 methods for later\n\tvar nativeMap = Array.prototype.map,\n\t\tnativeIsArray = Array.isArray,\n\t\ttoString = Object.prototype.toString;\n\n\t/**\n\t * Tests whether supplied parameter is a string\n\t * from underscore.js\n\t */\n\tfunction isString(obj) {\n\t\treturn !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is a string\n\t * from underscore.js, delegates to ECMA5's native Array.isArray\n\t */\n\tfunction isArray(obj) {\n\t\treturn nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is a true object\n\t */\n\tfunction isObject(obj) {\n\t\treturn obj && toString.call(obj) === '[object Object]';\n\t}\n\n\t/**\n\t * Extends an object with a defaults object, similar to underscore's _.defaults\n\t *\n\t * Used for abstracting parameter handling from API methods\n\t */\n\tfunction defaults(object, defs) {\n\t\tvar key;\n\t\tobject = object || {};\n\t\tdefs = defs || {};\n\t\t// Iterate over object non-prototype properties:\n\t\tfor (key in defs) {\n\t\t\tif (defs.hasOwnProperty(key)) {\n\t\t\t\t// Replace values with defaults only if undefined (allow empty/zero values):\n\t\t\t\tif (object[key] == null) object[key] = defs[key];\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * Implementation of `Array.map()` for iteration loops\n\t *\n\t * Returns a new Array as a result of calling `iterator` on each array value.\n\t * Defers to native Array.map if available\n\t */\n\tfunction map(obj, iterator, context) {\n\t\tvar results = [], i, j;\n\n\t\tif (!obj) return results;\n\n\t\t// Use native .map method if it exists:\n\t\tif (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n\t\t// Fallback for native .map:\n\t\tfor (i = 0, j = obj.length; i < j; i++ ) {\n\t\t\tresults[i] = iterator.call(context, obj[i], i, obj);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Check and normalise the value of precision (must be positive integer)\n\t */\n\tfunction checkPrecision(val, base) {\n\t\tval = Math.round(Math.abs(val));\n\t\treturn isNaN(val)? base : val;\n\t}\n\n\n\t/**\n\t * Parses a format string or object and returns format obj for use in rendering\n\t *\n\t * `format` is either a string with the default (positive) format, or object\n\t * containing `pos` (required), `neg` and `zero` values (or a function returning\n\t * either a string or object)\n\t *\n\t * Either string or format.pos must contain \"%v\" (value) to be valid\n\t */\n\tfunction checkCurrencyFormat(format) {\n\t\tvar defaults = lib.settings.currency.format;\n\n\t\t// Allow function as format parameter (should return string or object):\n\t\tif ( typeof format === \"function\" ) format = format();\n\n\t\t// Format can be a string, in which case `value` (\"%v\") must be present:\n\t\tif ( isString( format ) && format.match(\"%v\") ) {\n\n\t\t\t// Create and return positive, negative and zero formats:\n\t\t\treturn {\n\t\t\t\tpos : format,\n\t\t\t\tneg : format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : format\n\t\t\t};\n\n\t\t// If no format, or object is missing valid positive value, use defaults:\n\t\t} else if ( !format || !format.pos || !format.pos.match(\"%v\") ) {\n\n\t\t\t// If defaults is a string, casts it to an object for faster checking next time:\n\t\t\treturn ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\n\t\t\t\tpos : defaults,\n\t\t\t\tneg : defaults.replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : defaults\n\t\t\t};\n\n\t\t}\n\t\t// Otherwise, assume format was fine:\n\t\treturn format;\n\t}\n\n\n\t/* --- API Methods --- */\n\n\t/**\n\t * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n\t * Alias: `accounting.parse(string)`\n\t *\n\t * Decimal must be included in the regular expression to match floats (defaults to\n\t * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n\t * separator, provide it as the second argument.\n\t *\n\t * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n\t *\n\t * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n\t */\n\tvar unformat = lib.unformat = lib.parse = function(value, decimal) {\n\t\t// Recursively unformat arrays:\n\t\tif (isArray(value)) {\n\t\t\treturn map(value, function(val) {\n\t\t\t\treturn unformat(val, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Fails silently (need decent errors):\n\t\tvalue = value || 0;\n\n\t\t// Return the value as-is if it's already a number:\n\t\tif (typeof value === \"number\") return value;\n\n\t\t// Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n\t\tdecimal = decimal || lib.settings.number.decimal;\n\n\t\t // Build regex to strip out everything except digits, decimal point and minus sign:\n\t\tvar regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\n\t\t\tunformatted = parseFloat(\n\t\t\t\t(\"\" + value)\n\t\t\t\t.replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\n\t\t\t\t.replace(regex, '')         // strip out any cruft\n\t\t\t\t.replace(decimal, '.')      // make sure decimal point is standard\n\t\t\t);\n\n\t\t// This will fail silently which may cause trouble, let's wait and see:\n\t\treturn !isNaN(unformatted) ? unformatted : 0;\n\t};\n\n\n\t/**\n\t * Implementation of toFixed() that treats floats more like decimals\n\t *\n\t * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n\t * problems for accounting- and finance-related software.\n\t */\n\tvar toFixed = lib.toFixed = function(value, precision) {\n\t\tprecision = checkPrecision(precision, lib.settings.number.precision);\n\t\tvar power = Math.pow(10, precision);\n\n\t\t// Multiply up by precision, round accurately, then divide and use native toFixed():\n\t\treturn (Math.round(lib.unformat(value) * power) / power).toFixed(precision);\n\t};\n\n\n\t/**\n\t * Format a number, with comma-separated thousands and custom precision/decimal places\n\t * Alias: `accounting.format()`\n\t *\n\t * Localise by overriding the precision and thousand / decimal separators\n\t * 2nd parameter `precision` can be an object matching `settings.number`\n\t */\n\tvar formatNumber = lib.formatNumber = lib.format = function(number, precision, thousand, decimal) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val) {\n\t\t\t\treturn formatNumber(val, precision, thousand, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(precision) ? precision : {\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal\n\t\t\t\t}),\n\t\t\t\tlib.settings.number\n\t\t\t),\n\n\t\t\t// Clean up precision\n\t\t\tusePrecision = checkPrecision(opts.precision),\n\n\t\t\t// Do some calc:\n\t\t\tnegative = number < 0 ? \"-\" : \"\",\n\t\t\tbase = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\n\t\t\tmod = base.length > 3 ? base.length % 3 : 0;\n\n\t\t// Format the number:\n\t\treturn negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n\t};\n\n\n\t/**\n\t * Format a number into currency\n\t *\n\t * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n\t * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n\t *\n\t * Localise by overriding the symbol, precision, thousand / decimal separators and format\n\t * Second param can be an object matching `settings.currency` which is the easiest way.\n\t *\n\t * To do: tidy up the parameters\n\t */\n\tvar formatMoney = lib.formatMoney = function(number, symbol, precision, thousand, decimal, format) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val){\n\t\t\t\treturn formatMoney(val, symbol, precision, thousand, decimal, format);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero):\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Choose which format to use for this value:\n\t\t\tuseFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\n\n\t\t// Return with currency symbol added:\n\t\treturn useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\t};\n\n\n\t/**\n\t * Format a list of numbers into an accounting column, padding with whitespace\n\t * to line up currency symbols, thousand separators and decimals places\n\t *\n\t * List should be an array of numbers\n\t * Second parameter can be an object containing keys that match the params\n\t *\n\t * Returns array of accouting-formatted number strings of same length\n\t *\n\t * NB: `white-space:pre` CSS rule is required on the list container to prevent\n\t * browsers from collapsing the whitespace in the output strings.\n\t */\n\tlib.formatColumn = function(list, symbol, precision, thousand, decimal, format) {\n\t\tif (!list) return [];\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero), only need pos for now:\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Whether to pad at start of string or after currency symbol:\n\t\t\tpadAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\n\n\t\t\t// Store value for the length of the longest string in the column:\n\t\t\tmaxLength = 0,\n\n\t\t\t// Format the list according to options, store the length of the longest string:\n\t\t\tformatted = map(list, function(val, i) {\n\t\t\t\tif (isArray(val)) {\n\t\t\t\t\t// Recursively format columns if list is a multi-dimensional array:\n\t\t\t\t\treturn lib.formatColumn(val, opts);\n\t\t\t\t} else {\n\t\t\t\t\t// Clean up the value\n\t\t\t\t\tval = unformat(val);\n\n\t\t\t\t\t// Choose which format to use for this value (pos, neg or zero):\n\t\t\t\t\tvar useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\n\n\t\t\t\t\t\t// Format this value, push into formatted list and save the length:\n\t\t\t\t\t\tfVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n\t\t\t\t\tif (fVal.length > maxLength) maxLength = fVal.length;\n\t\t\t\t\treturn fVal;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Pad each number in the list and send back the column of numbers:\n\t\treturn map(formatted, function(val, i) {\n\t\t\t// Only if this is a string (not a nested array, which would have already been padded):\n\t\t\tif (isString(val) && val.length < maxLength) {\n\t\t\t\t// Depending on symbol position, pad after symbol or at index 0:\n\t\t\t\treturn padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(\" \"))) : (new Array(maxLength - val.length + 1).join(\" \")) + val;\n\t\t\t}\n\t\t\treturn val;\n\t\t});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `accounting` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = lib;\n\t\t}\n\t\texports.accounting = lib;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn lib;\n\t\t});\n\t} else {\n\t\t// Use accounting.noConflict to restore `accounting` back to its original value.\n\t\t// Returns a reference to the library's `accounting` object;\n\t\t// e.g. `var numbers = accounting.noConflict();`\n\t\tlib.noConflict = (function(oldAccounting) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `accounting` variable:\n\t\t\t\troot.accounting = oldAccounting;\n\t\t\t\t// Delete the noConflict method:\n\t\t\t\tlib.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn lib;\n\t\t\t};\n\t\t})(root.accounting);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['accounting'] = lib;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_accounting@0.4.1@accounting/accounting.js\n// module id = KeJ8\n// module chunks = 1","/**\r\n * Created by 49699 on 2018/3/9.\r\n */\r\nexport const BASE_URL = 'http://47.88.216.48:80/bali/v1'\n\n\n// WEBPACK FOOTER //\n// ./app/pages/config.js","// __webpack_public_path__ = process.env.PUBLIC_PATH;\r\nconsole.log(process.env.NODE_ENV)\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './share.css'\r\nimport accounting from 'accounting'\r\nimport { BASE_URL } from '../config'\r\n\r\nconst getQueryString = function (name) {\r\n    let reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i'),\r\n        r = window.location.search.substr(1).match(reg);\r\n    if (r != null) {\r\n        return decodeURIComponent(r[2]);\r\n    }\r\n    return null;\r\n}\r\n\r\nlet id = getQueryString('id')\r\nlet pageData = null\r\nif (!id) {\r\n    $('#page-warpper').html(`\r\n        <p style=\"text-align: center;padding: 20px 10px;color: #ccc;\">does not exist</p>\r\n    `)\r\n} else {\r\n    $('#page-warpper').html(`\r\n        <p style=\"text-align: center;padding: 20px 10px;color: #ccc;\">Loading...</p>\r\n    `)\r\n    $.get(BASE_URL + '/commodity?id=' + id).done(function(result){\r\n        let res = JSON.parse(result)\r\n        if (res.code === 200) {\r\n            pageData = JSON.parse(result).data.commodity\r\n            console.log(pageData)\r\n            $('#page-warpper').html(`\r\n                <div class=\"product__video\">\r\n                    <div class=\"product__video--warpper\">\r\n                        <video class=\"video\" controls src=\"${pageData.video}\" poster=\"${pageData.picture}\">\r\n                            Your browser does not support the video tag.\r\n                        </video>\r\n                    </div>\r\n                </div>\r\n                <div class=\"product__head\">\r\n                    <div class=\"l\">\r\n                        <h3>${pageData.name}</h3>\r\n                        <p>\r\n                            <strong>Rp. ${accounting.formatNumber(pageData.price)}</strong>\r\n                            <span>/</span>\r\n                            <span>average price</span>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"r\">\r\n                        <a href=\"${pageData.booking}\" target=\"_blank\">Visit Website</a>\r\n                    </div>\r\n                </div>\r\n                <div class=\"product__body\">\r\n                    ${pageData.description}\r\n                </div>\r\n            `)\r\n        }\r\n\r\n    }).fail(function (error) {\r\n        console.log(error)\r\n        $('#page-warpper').html(`\r\n             <p style=\"text-align: center;padding: 20px 10px;color: #ccc;\">does not exist</p>\r\n         `)\r\n    })\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./app/pages/share/share.js"],"sourceRoot":""}